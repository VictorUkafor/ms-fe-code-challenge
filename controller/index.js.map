{"version":3,"sources":["../../controller/index.js"],"names":["localStorage","LocalStorage","fetchTweets","req","res","left","getItem","center","right","backgroundColour","numberOfTweets","date","allUrls","tweets","Promise","all","map","url","axios","get","data","responses","response","user","screen_name","locals","metaTags","title","description","keywords","render","helpers","trimDate","getColumn","error","showSetting","setSetting","processForm","body","columnOrder","position","split","setItem","redirect"],"mappings":"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","file":"index.js","sourcesContent":["import { LocalStorage } from 'node-localstorage';\nimport axios from 'axios';\nimport { trimDate, urls, getColumn } from '../lib';\n\nconst localStorage = new LocalStorage('./scratch');\n\n// This method fetches tweets from Twitter API and\n// displays them on the page\nexport const fetchTweets = async (req, res) => {\n  try {\n    // get settings values from the localStorage\n    const left = localStorage.getItem('left_position') || 'MakeSchool';\n    const center = localStorage.getItem('center_position') || 'newsycombinator';\n    const right = localStorage.getItem('right_position') || 'ycombinator';\n    const backgroundColour = localStorage.getItem('background_colour') || 'Default';\n    const numberOfTweets = localStorage.getItem('number_of_tweets') || 30;\n    const date = localStorage.getItem('date') || '';\n\n    const allUrls = urls(numberOfTweets);\n    const tweets = {};\n    const responses = await Promise.all(allUrls.map(async (url) => {\n      const data = await axios.get(url);\n      return data;\n    }));\n\n    responses.map((response) => {\n      tweets[response.data[0].user.screen_name] = response.data;\n      return tweets;\n    });\n\n    // values for meta tags\n    res.locals.metaTags = {\n      title: 'Home',\n      description: \"You're welcome\",\n      keywords: 'Twitter, API',\n    };\n\n    res.render('home', {\n      tweets,\n      left,\n      center,\n      right,\n      numberOfTweets,\n      backgroundColour,\n      date,\n      helpers: { trimDate, getColumn }\n    });\n  } catch (error) {\n    res.render('home', { error: 'Server error' });\n  }\n};\n\n// displays settings page\nexport const showSetting = (req, res) => {\n  // get settings values from the localStorage\n  const left = localStorage.getItem('left_position') || 'MakeSchool';\n  const center = localStorage.getItem('center_position') || 'newsycombinator';\n  const right = localStorage.getItem('right_position') || 'ycombinator';\n  const backgroundColour = localStorage.getItem('background_colour') || 'Default';\n  const numberOfTweets = localStorage.getItem('number_of_tweets') || 30;\n  const date = localStorage.getItem('date') || '';\n\n  // values for meta tags\n  res.locals.metaTags = {\n    title: 'Settings',\n    description: 'Settings Page',\n    keywords: 'Twitter, API',\n  };\n\n  res.render('layout_setting', {\n    left,\n    center,\n    right,\n    numberOfTweets,\n    backgroundColour,\n    date,\n  });\n};\n\n// displays the edit settings page\nexport const setSetting = (req, res) => {\n  // values for meta tags\n  res.locals.metaTags = {\n    title: 'Update Settings',\n    description: 'Update Settings',\n    keywords: 'Twitter, API',\n  };\n\n  res.render('edit_setting');\n};\n\n\n// processes the edit settings page\nexport const processForm = (req, res) => {\n  // get values from settings form\n  let {\n    columnOrder, numberOfTweets, backgroundColour, date\n  } = req.body;\n\n  // validates form\n  if (columnOrder === 'choose . . .') {\n    columnOrder = 'makeschool newsycombinator ycombinator';\n  }\n  if (numberOfTweets === 'choose . . .') { numberOfTweets = '30'; }\n  if (backgroundColour === 'choose . . .') { backgroundColour = 'Default'; }\n  if (date === 'choose . . .') { date = ''; }\n\n  const position = columnOrder.split(' ');\n  const left = position[0];\n  const center = position[1];\n  const right = position[2];\n\n  // saves settings values to localstorage\n  localStorage.setItem('left_position', left);\n  localStorage.setItem('center_position', center);\n  localStorage.setItem('right_position', right);\n  localStorage.setItem('background_colour', backgroundColour);\n  localStorage.setItem('number_of_tweets', numberOfTweets);\n  localStorage.setItem('date', date);\n\n  res.redirect('/');\n};\n"]}